CI/CD

Continuous Integration / Continuous Delivery / Continuous Deployment

Why as SDET do we ween to know Jenkins CICD tool?
One of the requirements/DoD(Definition of done) for an Automation task/story in Jira is automated tests
MUST run in Jenkins or other CI/CD tool.

When we execute regression tests, or smoke tests,  we do not run them in our local computer.
It is executed in Jenkins job and we can share report from jenkins with everyone.

Also we have daily scheduled runs for Smoke tests in QA, DEV, Staging, PROD
============================================================================
BEFORE Jenkins:
    - used to be lots of manual processes, and prod releases would be not so often. Mostly in Waterfall style.
    - Development team -> write application code according to requirements, then compile and build the code and hand over to
    Operation team. Tools For building -> Ant, Maven, Gradle.
    - Operations team would take the Jar file and deploy to Application server(Tomcat, Webisphere etc)
    - System admins -> to maintain servers for application, database etc
    - most of above was a manual process
    - it was a slow process that was difficult for frequent releases

AFTER Jenkins:
    - CI/CI process got automated with minimal manual steps
    - Now DevOps team sets up Ci/CI pipelines(COMPILE, BUILD, TEST, DEPLOY) automatically
    - Now we are able to ship/release more frequently.
    - This is so important especially with Agile methodology where releases happen every 2 weeks or 4 weeks.
    - And applications are now build using Microservices architecture(break down to seperate independent services

============================================================================

Environments:
    Lower: Dev, QA, Stage/Preview
    Prod: Production

============================================================================
DevOps

   - It helps use reduce disconnection between QA - DEV - System Administrator
   - It removes roadblock to make application release faster,reliable with minimal bugs
   - It is intersection of DEVelopment and OPerationS

   Devops Engineer
   Cloud Engineer
   System Administrator

Q - What is infrastructure ?
    - all the resources needed to deploy the application
   - It is everything about pipeline that we need to have

   - Environments
   - Servers
   - Databases
   - Jenkins (CICD tools )
   - Application
   - Data
   - Trigger

IAC -> Infrastructure As Code

Q - Who will create infrastructure ?

   - Devops team will do it

Q - Why we are learning CICD ?

   - Since we are the part of the team APP development we are gonna involve that process to make sure application working well by doing smoke / regression


Q - Which tool Devops teams are using ?

   - Jenkins
   - Github Actions
   - Gitlab CI
   - Travis CI
   - Circle CI
   - Bamboo
   - AWS Codepipeline



1- VCS (Github) --> TEST ENVIRONMENT

   - Build --> With the hlep of build managements tools (maven,gradle,npm etc)
               application will be packaged as jar , ear, war

   - Code Analysis --> SonarQube has integration with Jenkins to check code quality, potential issue,security leaks and infinite loop

   - Unit/Integration Test --> It is not our responsibility to do Unit and Integration Test.Developer will do it.It helps us to identify bugs in early stages.Test are doing in code level NOT functional


2- TEST ENVIRONMENT --> STAGING ENVIRONMENT
   (OUR ROLE IS STARTING IN THIS STAGE )


   - Smoke
         -> To make sure application MAIN functionalities are working well we are doing smoke test
         -> In a nutshell --> Doing knock knock
         -> to check application aup and running

         -> Smoke Suite --> 10 to 50
                        --> 10 min
                        --> Time and size of test cases depends on application size


   - Regression
         -> To make sure ENTIRE APP functionalities are working well we are doing Regression Test
         -> Assume you 400-500 regression test and it should around 2-3 hours

   - Performance
         -> It is not our job to do performance test
         -> It is good to have dedicated team and dedicated env
         -> most of the time they are using QA env
         -> Popular tools are -> LOADRUNNER
                              -> GATLING
                              -> JMETER
                              -> Grafana K6

   - Deploy
         -> It is making application for another environments


3- STAGING ENVIRONMENT --> PRODUCTION ENVIRONMENTS

   - STAGING (PRE PROD ) --> It is used to preapare applicaiton for production environment.One step before production

   - UAT --> User Acceptance Test is DONE ususally from PO or dedicated team company.
   Go / No-Go call

   - RELEASE --> It is business decision to make application available for HAPPY customers


-----------------------------------------------------

PIPELINE

-> It is a set of process that takes the code from VCS (Github),build,test and deploy application to real user in automated fashion


Q- What is JENKINS role in this pipeline ?

   - JENKINS is one the popular (open source tool) to manage pipeline.It takes over responsiblity of pipeline execution oce developer code ready in Github then will follow the process till the end for application development


Continous Integration / Contiinous Delivery / Continous Deployment

   - It is a methodology for applicaton jpurney from developers VCS to END USERS
   - It is a method to frequently deliver applicaitons to customers by introducing automation into app development


Continous Integration

   -> It is process of automated build,unit/integration test and code analysisi

   OUR ROLE
      - DEPLOYMENT
            - Smoke
            - Regression needs to be triggered manually to run into JENKINS
              to make sure application working well

      - DAILY
            - Smoke -> Schedule your smoke execuiton by using JENKINS at a certain time


 Continous Delivery

   -> It is automated build,execution of unit/integration test,execution of code analysis , doing functional test (smoke-regression) and deploying applicaiton to another env (staging env) automatically

   -> Still in Continous delivery application relaase including human intervention

   OUR ROLE
      - DEPLOYMENT
            - Smoke
            - Regression These tests will be triggered from JENKINS with automated triggers.We need to maintain our framework and keep updated or test repository

      - DAILY
            - Smoke -> Schedule your smoke execuiton by using JENKINS at a certain time

 Continous Deployment

   -> It means taht every change that developers make goes thrpught the pipeline in autmated fashion if all steps working well application will be deployed to END-USERS

   -> It is faster than Continous Integration and Continous Delivery.Because there is no human intervention in Continous Deployment


Q -> What if any step fails ?

   -> It wll turn back VCS to fic bugs that we catch

   OUR ROLE
      - DEPLOYMENT
            - Smoke
            - Regression These tests will be triggered from JENKINS with automated triggers.We need to maintain our framework and keep updated or test repository

      - DAILY
            - Smoke -> Schedule your smoke execuiton by using JENKINS at a certain time


-----------------------------------------------------------------------------
Cloud providers:
Amazon AWS
Microsoft Azure
Google Cloud

SERVERS

  -> A server is a computer that provides service for another computer

  PHYSICAL

      - It is a hardware with more compute power and there is no monitor(UI)
      - With the help virtualizaton software it allows to create virtual servers in it
      and allows to create each virtual server their own OS - storage - CPU - applications


  VIRTUAL

      - It is a virtual representian of physical server
      - Each Virtual server has thier own OS - storage - CPU - applications
      - They are fully isolated between each other


-----------------------------------------------------------------------------

Servers in the cloud

   Main Type of Cloud Computing

      - On-prem --> Server in your local building.Each company needs to setup their own infrastructure by getting new hardwares and connecting to get more compute power


      - IaaS-> Infrastructure as a Service

         -> We created on of the IaaS which EC2 Virtual Server
         -> We have already ready
                  - Networking
                  - Storage
                  - Virtualization
                  - Server
         -> By using CYDEO AMI we installed

                  - Applications
                  - OS
                  - Runtime env

      - PaaS -> Product as Service

         -> It is ready infrastructure for your product
         -> User only needs to add application and its data


      - SaaS -> Software as a Service

         -> It is ready infrasture for your application
         -> User dont need to add any data or application

         - Slack -Discord -Gmail - Dropbox etc
=========================================================

Do you have experience with AWS?
Yes, our company uses AWS EC2 servers and other services for whole Infrastructure.
We deploy applications into EC2 servers
We use Amazon Relational Database Service (Amazon RDS): for our databases
Also many other services.
Automation code runs in Jenkins server that is in AWS EC2.

---------
We have dedicated DEVOPS team to maintain our Infrastructure.
---------
Do you have experience with CI/CD?
Yes, I use Jenkins jobs to schedule and trigger execution of my smoke and regression tests across all environments.
smoke-tests-qa, smoke-tests-prod etc
regression-qa,
reqres-api-tests

One of the acceptance criteria/Definion of done of Automated Tests, is that test MUST be able to RUN in Jenkins

GitHub actions? In our team, We use Jenkins jobs since it is more flexible and has many plugin available.
------------

How do you run your tests in Jenkins?
Firstly I make sure tests run locally Ok with maven command(mvn test).
Then I create Jenkins Job by specifying GitHub repository + Build steps with maven command + Post build actions for publishing html report,
sending email or slack/teams channel.

I create seperate Jenkins jobs for Smoke and regression tests to run across all environments and I use TAGS to filter my tests.
------------

Do you have experience with Docker containers and Kubernetes(K8s)?

Our Infrasture uses Kubernetes(Amazon EKS) for deployment of applications.
Our application is developed using Microservices architecture, and DevOps and Infrasture team builds those into Docker Images
and they are deployed to Managed Kubernetes Service - Amazon EKS.

Kubernetes helps to deploy our application to Kubernetes nodes(EC2).

Kubernetes CLuster > Nodes (Application runs)

------------

Kafka is used for Data pipelines for
------------

Who sets up sets Jenkins jobs for smoke etc?
I do set up Jenkins jobs
How do you run your tests in Jenkins?
Firstly I make sure tests run locally Ok with maven command(mvn test).
Then I create Jenkins Job by specifying GitHub repository + Build steps with maven command + Post build actions for publishing html report,
sending email or slack/teams channel.

I create seperate Jenkins jobs for Smoke and regression tests to run across all environments and I use TAGS to filter my tests.
------------

Maven command to run all tests:
mvn test
-------------
Jenkins Jobs setup for API Tests:

1) Firstly we run api tests locally using maven command:
I use @tags to filter cucumber scenarios to execute.
Then run maven command from command line:
mvn clean test -Dcucumber.filter.tags=@api

2) Login to Jenkins (Cydeo/Cydeo)
3) Create new Item/New job
4) Give it a name: reqres-api-tests
Select FreeStyle Project.
FreeStyle Project is easier to set up and perfect for automation code.
Pipeline needs Jenkins file pipeline code and DevOps teams use that for CI/CD
5) We are on Configuration page of Jenkins Job:

-> Source Code Management -> provide GitHub repository and branch name(master)
-> Build Steps -> Add Build Step -> Maven:
    Version -> M3
    Goal -> test -Dcucumber.filter.tags=@api
-> Post-build Actions -> Cucumber Reports
-> SAVE
-> Build Now to manually run the Jenkins Job

Summary so far: We created Jenkins Job to run API tests.
We provided GitHub repo and branch to pull
We provided maven command as Build Step
We asked for Cucumber HTML report as Post - build action to see results of execution


SCHEDULING JOBS EXECUTION:
Now we will schedule the execution, so that tests run automatically from Jenkins job on certain time.

We will have flexibility of running manually anytime by clicking Build Now
Also it will be scheduled.

1) Open reqres-api-test job configuration
2) Scroll down to Build Trigger -> Build periodically. Lets us schedule executions
Scheduling also called CHRON JOB:
https://crontab.guru/#0_6_*_*_*

TZ=America/New_York
0 6 * * *
It means at 6 AM everyday new york time.

==================
Discord notifier Post build step.
Normally companies, you will use either MS Teams or Slack.
For practice, we are using Discord channel notification.

When test execution is completed, it will send notification to that channel with the result. Pass or Fail.
You can customize what needs to be sent over.
===================

When Jenkins job execution ends, it send a notification to Dedicated channel for our team. (Ms Teams, Slack etc)
===================

before doing Pull request, I run jenkins job with my branch in Github, if everything runs fine, I create A PR for review











